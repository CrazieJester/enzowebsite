{"version":3,"sources":["jacob.png","serviceWorker.js","components/TextFields.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","useStyles","makeStyles","theme","container","display","flexWrap","textField","marginLeft","spacing","marginRight","width","dense","marginTop","menu","currencies","value","label","ReactDOM","render","classes","React","useState","name","age","multiline","currency","values","setValues","handleChange","event","target","className","noValidate","autoComplete","TextField","id","onChange","margin","defaultValue","required","error","disabled","type","InputProps","readOnly","clsx","rowsMax","rows","helperText","placeholder","InputLabelProps","shrink","select","SelectProps","MenuProps","map","option","MenuItem","key","native","style","fullWidth","inputProps","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.47ba5406.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/jacob.aec31b6a.png\";","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  container: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n    width: 200,\r\n  },\r\n  dense: {\r\n    marginTop: 19,\r\n  },\r\n  menu: {\r\n    width: 200,\r\n  },\r\n}));\r\n\r\nconst currencies = [\r\n  {\r\n    value: 'USD',\r\n    label: '$',\r\n  },\r\n  {\r\n    value: 'EUR',\r\n    label: '€',\r\n  },\r\n  {\r\n    value: 'BTC',\r\n    label: '฿',\r\n  },\r\n  {\r\n    value: 'JPY',\r\n    label: '¥',\r\n  },\r\n];\r\n\r\nexport default function TextFields() {\r\n  const classes = useStyles();\r\n  const [values, setValues] = React.useState({\r\n    name: 'Cat in the Hat',\r\n    age: '',\r\n    multiline: 'Controlled',\r\n    currency: 'EUR',\r\n  });\r\n\r\n  const handleChange = name => event => {\r\n    setValues({ ...values, [name]: event.target.value });\r\n  };\r\n\r\n  return (\r\n    <form className={classes.container} noValidate autoComplete=\"off\">\r\n      <TextField\r\n        id=\"standard-name\"\r\n        label=\"Name\"\r\n        className={classes.textField}\r\n        value={values.name}\r\n        onChange={handleChange('name')}\r\n        margin=\"normal\"\r\n      />\r\n      <TextField\r\n        id=\"standard-uncontrolled\"\r\n        label=\"Uncontrolled\"\r\n        defaultValue=\"foo\"\r\n        className={classes.textField}\r\n        margin=\"normal\"\r\n      />\r\n      <TextField\r\n        required\r\n        id=\"standard-required\"\r\n        label=\"Required\"\r\n        defaultValue=\"Hello World\"\r\n        className={classes.textField}\r\n        margin=\"normal\"\r\n      />\r\n      <TextField\r\n        error\r\n        id=\"standard-error\"\r\n        label=\"Error\"\r\n        defaultValue=\"Hello World\"\r\n        className={classes.textField}\r\n        margin=\"normal\"\r\n      />\r\n      <TextField\r\n        disabled\r\n        id=\"standard-disabled\"\r\n        label=\"Disabled\"\r\n        defaultValue=\"Hello World\"\r\n        className={classes.textField}\r\n        margin=\"normal\"\r\n      />\r\n      <TextField\r\n        id=\"standard-password-input\"\r\n        label=\"Password\"\r\n        className={classes.textField}\r\n        type=\"password\"\r\n        autoComplete=\"current-password\"\r\n        margin=\"normal\"\r\n      />\r\n      <TextField\r\n        id=\"standard-read-only-input\"\r\n        label=\"Read Only\"\r\n        defaultValue=\"Hello World\"\r\n        className={classes.textField}\r\n        margin=\"normal\"\r\n        InputProps={{\r\n          readOnly: true,\r\n        }}\r\n      />\r\n      <TextField\r\n        id=\"standard-dense\"\r\n        label=\"Dense\"\r\n        className={clsx(classes.textField, classes.dense)}\r\n        margin=\"dense\"\r\n      />\r\n      <TextField\r\n        id=\"standard-multiline-flexible\"\r\n        label=\"Multiline\"\r\n        multiline\r\n        rowsMax=\"4\"\r\n        value={values.multiline}\r\n        onChange={handleChange('multiline')}\r\n        className={classes.textField}\r\n        margin=\"normal\"\r\n      />\r\n      <TextField\r\n        id=\"standard-multiline-static\"\r\n        label=\"Multiline\"\r\n        multiline\r\n        rows=\"4\"\r\n        defaultValue=\"Default Value\"\r\n        className={classes.textField}\r\n        margin=\"normal\"\r\n      />\r\n      <TextField\r\n        id=\"standard-helperText\"\r\n        label=\"Helper text\"\r\n        defaultValue=\"Default Value\"\r\n        className={classes.textField}\r\n        helperText=\"Some important text\"\r\n        margin=\"normal\"\r\n      />\r\n      <TextField\r\n        id=\"standard-with-placeholder\"\r\n        label=\"With placeholder\"\r\n        placeholder=\"Placeholder\"\r\n        className={classes.textField}\r\n        margin=\"normal\"\r\n      />\r\n      <TextField\r\n        id=\"standard-textarea\"\r\n        label=\"With placeholder multiline\"\r\n        placeholder=\"Placeholder\"\r\n        multiline\r\n        className={classes.textField}\r\n        margin=\"normal\"\r\n      />\r\n      <TextField\r\n        id=\"standard-number\"\r\n        label=\"Number\"\r\n        value={values.age}\r\n        onChange={handleChange('age')}\r\n        type=\"number\"\r\n        className={classes.textField}\r\n        InputLabelProps={{\r\n          shrink: true,\r\n        }}\r\n        margin=\"normal\"\r\n      />\r\n      <TextField\r\n        id=\"standard-search\"\r\n        label=\"Search field\"\r\n        type=\"search\"\r\n        className={classes.textField}\r\n        margin=\"normal\"\r\n      />\r\n      <TextField\r\n        id=\"standard-select-currency\"\r\n        select\r\n        label=\"Select\"\r\n        className={classes.textField}\r\n        value={values.currency}\r\n        onChange={handleChange('currency')}\r\n        SelectProps={{\r\n          MenuProps: {\r\n            className: classes.menu,\r\n          },\r\n        }}\r\n        helperText=\"Please select your currency\"\r\n        margin=\"normal\"\r\n      >\r\n        {currencies.map(option => (\r\n          <MenuItem key={option.value} value={option.value}>\r\n            {option.label}\r\n          </MenuItem>\r\n        ))}\r\n      </TextField>\r\n      <TextField\r\n        id=\"standard-select-currency-native\"\r\n        select\r\n        label=\"Native select\"\r\n        className={classes.textField}\r\n        value={values.currency}\r\n        onChange={handleChange('currency')}\r\n        SelectProps={{\r\n          native: true,\r\n          MenuProps: {\r\n            className: classes.menu,\r\n          },\r\n        }}\r\n        helperText=\"Please select your currency\"\r\n        margin=\"normal\"\r\n      >\r\n        {currencies.map(option => (\r\n          <option key={option.value} value={option.value}>\r\n            {option.label}\r\n          </option>\r\n        ))}\r\n      </TextField>\r\n      <TextField\r\n        id=\"standard-full-width\"\r\n        label=\"Label\"\r\n        style={{ margin: 8 }}\r\n        placeholder=\"Placeholder\"\r\n        helperText=\"Full width!\"\r\n        fullWidth\r\n        margin=\"normal\"\r\n        InputLabelProps={{\r\n          shrink: true,\r\n        }}\r\n      />\r\n      <TextField\r\n        id=\"standard-bare\"\r\n        className={classes.textField}\r\n        defaultValue=\"Bare\"\r\n        margin=\"normal\"\r\n        inputProps={{ 'aria-label': 'bare' }}\r\n      />\r\n    </form>\r\n  );\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport TextFields from './components/TextFields';\r\n\r\nReactDOM.render(<TextFields />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}